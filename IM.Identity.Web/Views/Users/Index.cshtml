@using GridMvc.Html
@using IM.Identity.BI.Models
@using IM.Identity.Web.Resources
@model IEnumerable<ApplicationUser>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">

    <div class="formLeftHeader">
        <div class="formInnerHeader">
            <h2 class="pageHeaderCaption">Users</h2>
        </div>
    </div>

    <div class="layoutForm">

        <p>
            @Html.ActionLink("Create New", "Create")
        </p>
        
        @helper RenderActions(ApplicationUser item)
        {
            if (!item.IsSuperAdmin())
            {
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) <span>|</span>
                @Html.ActionLink("Details", "Details", new { id = item.Id }) <span>|</span>
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            }
            else if (ViewBag.LoggedInUserIsSuperAdmin)
            {
                @Html.ActionLink("Edit", "Edit", new { id = item.Id })  <span>|</span>
                @Html.ActionLink("Details", "Details", new { id = item.Id })
            }
        }
        
        @helper RenderSendEmailConfirmation(ApplicationUser item)
        {
            <span> @item.EmailConfirmed </span>
            
            if (item.EmailConfirmed)
            {
                @Html.ActionLink("Resend confirmation", "SendEmailConfirmation", new { id = item.Id })
            }
        }

        @Html.Grid(Model).Columns(columns =>
        {
            columns.Add(item => item.Email).Titled(ViewResource.Email);
            columns.Add(item => item.EmailConfirmed).Titled(ViewResource.EmailConfirmed).RenderValueAs(item => RenderSendEmailConfirmation(item)).Encoded(false).Sanitized(false);
            columns.Add(item => item.PhoneNumber).Titled(ViewResource.Phone);
            columns.Add(item => item.LockoutEnabled).Titled(ViewResource.LockoutEnabled);
            columns.Add(item => item.AccessFailedCount).Titled(ViewResource.AccessFailedCount);
            columns.Add().Encoded(false).Sanitized(false).RenderValueAs(item => RenderActions(item));
        }).Selectable(false).WithPaging(10).Sortable(true).Filterable(true)

    </div>

</div>